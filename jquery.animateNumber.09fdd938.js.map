{"version":3,"sources":["bower_components/jquery-animatenumber/jquery.animateNumber.js"],"names":["$","reverse","value","split","join","defaults","numberStep","now","tween","floored_number","Math","floor","elem","text","handle","nodeType","parentNode","handler","_animateNumberSetter","Tween","propHooks","number","set","fx","step","animateNumber","numberStepFactories","append","suffix","prop","separator","group_length","negative","separated_number","toString","target","length","number_parts","numbers","current_number_part","current_index","q","i","l","ceil","push","extract_number_parts","last_index","last","parseInt","remove_precending_zeros","fn","options","arguments","settings","extend","args","items","each","generic_complete","complete","apply","animate","jQuery"],"mappings":";CAMC,SAASA,GACJC,IAAAA,EAAU,SAASC,GACdA,OAAAA,EAAMC,MAAM,IAAIF,UAAUG,KAAK,KAGpCC,EAAW,CACbC,WAAY,SAASC,EAAKC,GACpBC,IAAAA,EAAiBC,KAAKC,MAAMJ,GACnBP,EAAEQ,EAAMI,MAEdC,KAAKJ,KAIZK,EAAS,SAAUN,GACjBI,IAAAA,EAAOJ,EAAMI,KACZA,GAAAA,EAAKG,UAAYH,EAAKI,WAAa,CAClCC,IAAAA,EAAUL,EAAKM,qBACdD,IACHA,EAAUZ,EAASC,YAErBW,EAAQT,EAAMD,IAAKC,KAIlBR,EAAEmB,OAAUnB,EAAEmB,MAAMC,UAGvBpB,EAAEmB,MAAMC,UAAUC,OAAS,CACzBC,IAAKR,GAHPd,EAAEuB,GAAGC,KAAKH,OAASP,EAsCrBd,EAAEyB,cAAgB,CAChBC,oBAAqB,CAcnBC,OAAQ,SAASC,GACR,OAAA,SAASrB,EAAKC,GACfC,IAAAA,EAAiBC,KAAKC,MAAMJ,GACnBP,EAAEQ,EAAMI,MAEdiB,KAAK,SAAUtB,GAAKM,KAAKJ,EAAiBmB,KAyBrDE,UAAW,SAASA,EAAWC,EAAcH,GAKpC,OAJPE,EAAYA,GAAa,IACzBC,EAAeA,GAAgB,EAC/BH,EAASA,GAAU,GAEZ,SAASrB,EAAKC,GACfwB,IAAAA,EAAWzB,EAAM,EAEjB0B,EADiBvB,KAAKC,OAAOqB,GAAY,EAAI,GAAKzB,GAChB2B,WAClCC,EAASnC,EAAEQ,EAAMI,MAEjBqB,GAAAA,EAAiBG,OAASL,EAAc,CACtCM,IAAAA,EAxFa,SAASJ,EAAkBF,GAOhD,IANAO,IAEAC,EACAC,EACAC,EAJAH,EAAUL,EAAiB9B,MAAM,IAAIF,UACrCoC,EAAe,GAKXK,EAAI,EAAGC,EAAIjC,KAAKkC,KAAKX,EAAiBG,OAASL,GAAeW,EAAIC,EAAGD,IAAK,CAE5ED,IADJF,EAAsB,GAClBE,EAAI,EAAGA,EAAIV,IACbS,EAAgBE,EAAIX,EAAeU,KACbR,EAAiBG,OAFZK,IAM3BF,GAA4CD,EAAQE,GAEtDH,EAAaQ,KAAKN,GAGbF,OAAAA,EAoEoBS,CAAqBb,EAAkBF,GAE1DE,EAnEoB,SAASI,GACjCU,IAAAA,EAAaV,EAAaD,OAAS,EACnCY,EAAO/C,EAAQoC,EAAaU,IAGzBV,OADPA,EAAaU,GAAc9C,EAAQgD,SAASD,EAAM,IAAId,YAC/CG,EA8DoBa,CAAwBb,GAAcjC,KAAK0B,GAC9DG,EAAmBhC,EAAQgC,GAG7BE,EAAON,KAAK,SAAUtB,GAAKM,MAAMmB,EAAW,IAAM,IAAMC,EAAmBL,OAMnF5B,EAAEmD,GAAG1B,cAAgB,WAOf,IANA2B,IAAAA,EAAUC,UAAU,GACpBC,EAAWtD,EAAEuD,OAAO,GAAIlD,EAAU+C,GAElCjB,EAASnC,EAAE,MACXwD,EAAO,CAACF,GAEJZ,EAAI,EAAGC,EAAIU,UAAUjB,OAAQM,EAAIC,EAAGD,IAC1Cc,EAAKX,KAAKQ,UAAUX,IAIlBU,GAAAA,EAAQ9C,WAAY,CAElBmD,IAAAA,EAAQ,KAAKC,KAAK,WACfxC,KAAAA,qBAAuBkC,EAAQ9C,aAIlCqD,EAAmBL,EAASM,SAChCN,EAASM,SAAW,WAClBH,EAAMC,KAAK,kBACF,KAAKxC,uBAGTyC,GACHA,EAAiBE,MAAM,KAAMR,YAK5BlB,OAAAA,EAAO2B,QAAQD,MAAM1B,EAAQqB,IApKvC,CAuKCO","file":"jquery.animateNumber.09fdd938.js","sourceRoot":"../app","sourcesContent":["/** @preserve jQuery animateNumber plugin v0.0.14\n * (c) 2013, Alexandr Borisov.\n * https://github.com/aishek/jquery-animateNumber\n */\n\n// ['...'] notation using to avoid names minification by Google Closure Compiler\n(function($) {\n  var reverse = function(value) {\n    return value.split('').reverse().join('');\n  };\n\n  var defaults = {\n    numberStep: function(now, tween) {\n      var floored_number = Math.floor(now),\n          target = $(tween.elem);\n\n      target.text(floored_number);\n    }\n  };\n\n  var handle = function( tween ) {\n    var elem = tween.elem;\n    if ( elem.nodeType && elem.parentNode ) {\n      var handler = elem._animateNumberSetter;\n      if (!handler) {\n        handler = defaults.numberStep;\n      }\n      handler(tween.now, tween);\n    }\n  };\n\n  if (!$.Tween || !$.Tween.propHooks) {\n    $.fx.step.number = handle;\n  } else {\n    $.Tween.propHooks.number = {\n      set: handle\n    };\n  }\n\n  var extract_number_parts = function(separated_number, group_length) {\n    var numbers = separated_number.split('').reverse(),\n        number_parts = [],\n        current_number_part,\n        current_index,\n        q;\n\n    for(var i = 0, l = Math.ceil(separated_number.length / group_length); i < l; i++) {\n      current_number_part = '';\n      for(q = 0; q < group_length; q++) {\n        current_index = i * group_length + q;\n        if (current_index === separated_number.length) {\n          break;\n        }\n\n        current_number_part = current_number_part + numbers[current_index];\n      }\n      number_parts.push(current_number_part);\n    }\n\n    return number_parts;\n  };\n\n  var remove_precending_zeros = function(number_parts) {\n    var last_index = number_parts.length - 1,\n        last = reverse(number_parts[last_index]);\n\n    number_parts[last_index] = reverse(parseInt(last, 10).toString());\n    return number_parts;\n  };\n\n  $.animateNumber = {\n    numberStepFactories: {\n      /**\n       * Creates numberStep handler, which appends string to floored animated number on each step.\n       *\n       * @example\n       * // will animate to 100 with \"1 %\", \"2 %\", \"3 %\", ...\n       * $('#someid').animateNumber({\n       *   number: 100,\n       *   numberStep: $.animateNumber.numberStepFactories.append(' %')\n       * });\n       *\n       * @params {String} suffix string to append to animated number\n       * @returns {Function} numberStep-compatible function for use in animateNumber's parameters\n       */\n      append: function(suffix) {\n        return function(now, tween) {\n          var floored_number = Math.floor(now),\n              target = $(tween.elem);\n\n          target.prop('number', now).text(floored_number + suffix);\n        };\n      },\n\n      /**\n       * Creates numberStep handler, which format floored numbers by separating them to groups.\n       *\n       * @example\n       * // will animate with 1 ... 217,980 ... 95,217,980 ... 7,095,217,980\n       * $('#world-population').animateNumber({\n       *    number: 7095217980,\n       *    numberStep: $.animateNumber.numberStepFactories.separator(',')\n       * });\n       * @example\n       * // will animate with 1% ... 217,980% ... 95,217,980% ... 7,095,217,980%\n       * $('#salesIncrease').animateNumber({\n       *   number: 7095217980,\n       *   numberStep: $.animateNumber.numberStepFactories.separator(',', 3, '%')\n       * });\n       *\n       * @params {String} [separator=' '] string to separate number groups\n       * @params {String} [group_length=3] number group length\n       * @params {String} [suffix=''] suffix to append to number\n       * @returns {Function} numberStep-compatible function for use in animateNumber's parameters\n       */\n      separator: function(separator, group_length, suffix) {\n        separator = separator || ' ';\n        group_length = group_length || 3;\n        suffix = suffix || '';\n\n        return function(now, tween) {\n          var negative = now < 0,\n              floored_number = Math.floor((negative ? -1 : 1) * now),\n              separated_number = floored_number.toString(),\n              target = $(tween.elem);\n\n          if (separated_number.length > group_length) {\n            var number_parts = extract_number_parts(separated_number, group_length);\n\n            separated_number = remove_precending_zeros(number_parts).join(separator);\n            separated_number = reverse(separated_number);\n          }\n\n          target.prop('number', now).text((negative ? '-' : '') + separated_number + suffix);\n        };\n      }\n    }\n  };\n\n  $.fn.animateNumber = function() {\n    var options = arguments[0],\n        settings = $.extend({}, defaults, options),\n\n        target = $(this),\n        args = [settings];\n\n    for(var i = 1, l = arguments.length; i < l; i++) {\n      args.push(arguments[i]);\n    }\n\n    // needs of custom step function usage\n    if (options.numberStep) {\n      // assigns custom step functions\n      var items = this.each(function(){\n        this._animateNumberSetter = options.numberStep;\n      });\n\n      // cleanup of custom step functions after animation\n      var generic_complete = settings.complete;\n      settings.complete = function() {\n        items.each(function(){\n          delete this._animateNumberSetter;\n        });\n\n        if ( generic_complete ) {\n          generic_complete.apply(this, arguments);\n        }\n      };\n    }\n\n    return target.animate.apply(target, args);\n  };\n\n}(jQuery));\n"]}